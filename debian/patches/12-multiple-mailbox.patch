From: "Adam D. Barratt" <debian-bts@adam-barratt.org.uk>
Date: Thu, 18 Nov 2004 11:33:38 +0000
Subject: 12 multiple mailbox

Add support for multiple mailboxes per user (Bug#77711).
---
 doc/config.example |    2 +
 man/dot-spop3d.5   |   55 +++++++++++----
 man/pop_auth.1     |   12 +++-
 man/spop3d.conf.5  |    7 ++
 src/configfile.h   |    1 +
 src/main.c         |   26 +++++++-
 src/pop_auth.c     |  192 +++++++++++++++++++++++++++++++++++++++++++++-------
 src/userconfig.c   |   46 ++++++++-----
 8 files changed, 281 insertions(+), 60 deletions(-)

diff --git a/doc/config.example b/doc/config.example
index 9958e95..645e434 100644
--- a/doc/config.example
+++ b/doc/config.example
@@ -4,7 +4,9 @@
 	MailDropName	Maildir
 	MailDropType	maildir
 	UserBullFile	.spop3d-blurp /* It's just an example */
+	UserMailDropDelimiter "+"
 	ReadExpire	0
+
 </Global>
 <VirtualHost 192.168.1.1>
 	UnreadExpire	never
diff --git a/man/dot-spop3d.5 b/man/dot-spop3d.5
index e62f808..643f2a2 100644
--- a/man/dot-spop3d.5
+++ b/man/dot-spop3d.5
@@ -26,30 +26,55 @@
 dot-spop3d \- user configuration data for The Solid POP3 Server.
 .SH DESCRIPTION
 .PP
-User can specify his maildrop (location and type) and APOP secret in ~/.spop3d
-configuration file. You must set right mode (0600 - -rw-------) 
-for ~/.spop3d!!!
-Maildrop specification consists of 3 parts, separated
-by white space character:
+A user can specify their maildrop location, type and associated APOP
+secret in the configuration file ~/.spop3d.
+.PP
+The file must be set to mode 0600 (\-rw\-\-\-\-\-\-\-) or the server will not
+honour its content.
+.PP
+Maildrop specification consists of three parts, separated
+by white space characters:
 .TP
 \fIMailDrop\fP \fBpath type\fP
 .PP
-\fBPath\fP argument should be specified in the same format as \fI-n\fP 
-option in
+\fBPath\fP should be specified in the same format as the \fI-n\fP option in
 .BR spop3d (8).
-\fBType\fP argument should be \fImailbox\fP or \fImaildir\fP.
+\fBType\fP should be \fImailbox\fP or \fImaildir\fP.
 .PP
-APOP secret specification contains word \fIAPOPSecret\fP followed by encrypted 
-secret. You shouldn't change this secret manually. Use
-.BR pop_auth (1)
-to do this. See
+APOP secret specification consists of the word \fIAPOPSecret\fP followed
+by an encrypted secret. You shouldn't change this secret manually. Use
 .BR pop_auth (1)
-manual for more details on secret encryption!!!
+to do this.
+.PP
+Both maildrop and APOP secret specifications may optionally be followed
+by a mailbox name. This allows, for instance, user\fI+\fPboxA and user\fI+\fPboxB to
+be used as login names to access different mailboxes, where \fI+\fP
+means value of \fBUserMailDropDelimiter\fP server setting (see \fBspop3d.conf\fP(5)).
+.PP
+The APOP secret associated with a particular maildrop should be followed
+with the same mailbox name (or lack thereof). If no secret is specified
+for a maildrop then the user's standard POP password should be used to
+authenticate instead.
 .SH EXAMPLE
 .RS
 .nf
-MailDrop  	Mail/bugtraq	mailbox
-APOPSecret	0123456789
+MailDrop  	Mail/default	mailbox
+APOPSecret	2345678901
+MailDrop  	Mail/bugtraq	mailbox bugtraq
+APOPSecret	0123456789	bugtraq
+MailDrop  	Mail/private	mailbox private
+APOPSecret	9876543210	private
+.fi
+.RE
+.PP
+To set the APOP secret for the above maildrops use the following
+.BR pop_auth (1)
+commands:
+.RS
+.nf
+pop_auth
+pop_auth bugtraq
+pop_auth private
 .fi
 .RE
 .SH FILES
diff --git a/man/pop_auth.1 b/man/pop_auth.1
index 4c3d3e5..f216668 100644
--- a/man/pop_auth.1
+++ b/man/pop_auth.1
@@ -27,6 +27,8 @@ pop_auth \- set an user's APOP secret
 .SH SYNOPSIS
 .PP
 .B pop_auth
+[\-a]
+[\fI!\fP | \fIname\fP ...]
 .SH DESCRIPTION
 .PP
 .B Pop_auth
@@ -34,8 +36,16 @@ asks user for his APOP secret and stores this secret after encryption
 in ~/.spop3d file. Used encryption is very weak and protects only from
 curious system administrator who accidentialy looks at ~/.spop3d file.
 Don't use your account password as the APOP secret!!!
+.PP
+.B Pop_auth
+will set APOP secret for all maildrop \fIname\fPs specified in the command line.
+You can use the special \fI!\fP name to specifiy your default maildrop.
+If called without any arguments,
+.B pop_auth
+will set APOP secret for the default maildrop.
 .SH OPTIONS
-No options are recognized.
+.IP "\-a"
+Set the same APOP secret for all maildrops definied in ~/.spop3d
 .SH FILES
 .IP "~/.spop3d"
 User configuration file. APOP secret is written here.
diff --git a/man/spop3d.conf.5 b/man/spop3d.conf.5
index 7dd016d..2579b10 100644
--- a/man/spop3d.conf.5
+++ b/man/spop3d.conf.5
@@ -104,6 +104,13 @@ This option is not available in the Debian package.
 Allow users specify their maildrops (path and type) and APOP secrets.
 It's enabled by default.
 .TP
+.B UserMailDropDelimiter string
+Specify character used to separate different maildrops for user.
+If set, user can access different maildrops, as defined in their ~/.spop3d file,
+logging as "user_name\fIUserMailDropDelimiter\fRmaildrop_name"
+(e.g. user+private, if the \fIUserMailDropDelimiter\fR is set to \fI+\fR)
+Default is empty (disables support for multiple mailboxes per user).
+.TP
 .B AllowAPOP boolean
 Users can authenticate themselves with APOP scheme. It's enabled by default.
 .TP
diff --git a/src/configfile.h b/src/configfile.h
index f297977..70d5799 100644
--- a/src/configfile.h
+++ b/src/configfile.h
@@ -82,6 +82,7 @@ extern char logpriority[];
 extern int logstatistics;
 #endif
 extern int allowuser;
+extern char usermd_delim[2];
 
 struct str_option {
 	char *name;
diff --git a/src/main.c b/src/main.c
index 15a26f9..9c0a7dd 100644
--- a/src/main.c
+++ b/src/main.c
@@ -190,6 +190,7 @@ struct str_option options_set[] =
 #endif
 	{"LogPriority", OP_STRING, &logpriority, 64, check_logpriority},
 	{"AllowUser", OP_BOOLEAN, &allowuser, 0, NULL},
+	{"UserMailDropDelimiter", OP_STRING, &usermd_delim, 2, NULL},
 	{NULL, 0, NULL, 0, NULL}
 };
 
@@ -197,6 +198,8 @@ int allowuser = 1;
 int connection_state;
 char username[MAXARGLN + 1];
 char password[MAXARGLN + 1];
+char usersuffix[MAXARGLN + 1];
+char usermd_delim[2] = "";
 char buf[MAXCMDLN + 1];
 size_t count = 0;
 struct str_maildrop *maildrop;
@@ -1034,8 +1037,9 @@ int main(int argc, char **argv)
 	socklen_t addrln;
 	struct rlimit corelimit = {0, 0};
 	struct passwd *spop3d, *userentry;
-	int tmp, tmp2;
+	int tmp, tmp2, tmp3;
 	gid_t tmpgid;
+	char *suffix;
 #ifdef APOP
 	int useapop;
 #endif
@@ -1231,6 +1235,16 @@ int main(int argc, char **argv)
 					};
 			};
 #endif
+			memset(usersuffix, 0, sizeof(usersuffix));
+			if (usermd_delim[0]) {
+				suffix = strchr(username, usermd_delim[0]);
+				if (suffix != NULL) {
+					tmp3 = suffix - username + 1;
+					strncpy (usersuffix, suffix + 1, sizeof(usersuffix));
+					username[tmp3-1] = 0;
+					tmp3 = 0;
+				};
+			}
 #ifdef MAPPING
 			mapusername[0] = 0;
 			if (domapping) {
@@ -1369,6 +1383,16 @@ int main(int argc, char **argv)
 			close(tunnel[0]);
 			wait(NULL);
 			check_logpriority(logpriority);
+			memset(usersuffix, 0, sizeof(usersuffix));
+			if (usermd_delim[0]) {
+				suffix = strchr(username, usermd_delim[0]);
+				if (suffix != NULL) {
+					tmp3 = suffix - username + 1;
+					strncpy (usersuffix, suffix + 1, sizeof(usersuffix));
+					username[tmp3-1] = 0;
+					tmp3 = 0;
+				};
+			}
 #ifdef MAPPING
 			if (domapping) {
 				strcpy(origusername,username);
diff --git a/src/pop_auth.c b/src/pop_auth.c
index b49a0b3..9c26240 100644
--- a/src/pop_auth.c
+++ b/src/pop_auth.c
@@ -39,6 +39,105 @@ static const char rcsid[] = "$Id: pop_auth.c,v 1.2 2000/04/28 16:58:55 jurekb Ex
 #include "maildrop.h"
 #include "fdfgets.h"
 
+typedef struct  suffixes {
+	char*	suffix;		/* maildrop suffix name 				*/
+	char* 	apop_sec;	/* apop secret for maildrop			 	*/
+	char*   mdrop_type;	/* maildrop type: mailbox or maildir 			*/
+	char*   mdrop_path;	/* maildrop path 					*/
+	int 	flag;		/* should we set new apop secret for this maildrop 	*/
+	struct suffixes* next;  /* next maildrop 					*/
+} suffixes;
+
+char * xstrdup( char* s ) {
+	s = strdup(s ? s : "");
+	if (!s) {
+		fprintf(stderr, "cant' allocate memory\n");
+		exit(1);
+	}
+	return s;
+}
+
+/* adds new suffix definition to list; note the list is sorted on the suffix field */
+void add_suffix(suffixes **head, char* suffix, char* apop_sec, char* mdrop_type, char* mdrop_path)
+{
+	suffixes *p, *q;
+	int r;
+
+	if (!suffix) {
+		suffix = "";
+	}
+
+	p = *head;
+	q = NULL;   	/* q is one before p, i.e. q->next == p */
+	r = 1;
+	while (p) {
+		r = strcmp(p->suffix, suffix);
+		if (r < 0) {
+			q = p;
+			p = p->next;
+		} else {
+			break;
+		}
+	}
+
+	if ((r == 0) && (mdrop_type && p->mdrop_type)) {
+			fprintf(stderr, "%s already set%s%s\n",
+					(mdrop_type) ? "Maildrop" : "APOP secret",
+					*suffix ? " for suffix" : "" ,
+					*suffix ? suffix : ""  );
+			exit(1);
+	}
+
+	if ( r != 0 ) {
+		/* have to add new */
+		p = (suffixes*) malloc( sizeof(suffixes) );
+		if (!p) {
+			fprintf(stderr, "can't allocate memory\n");
+			exit(1);
+		}
+
+		memset(p, 0, sizeof(suffixes));
+		p->suffix = xstrdup(suffix);
+		if (!q) {
+			p->next = *head;
+			*head = p;
+		} else {
+			p->next = q->next;
+			q->next = p;
+		}
+	}
+
+	if (mdrop_type) {
+		p->mdrop_type = xstrdup(mdrop_type);
+		p->mdrop_path = xstrdup(mdrop_path);
+	} else if(apop_sec) {
+		p->apop_sec   = xstrdup(apop_sec);
+	} else {
+		p->flag = 1;
+	}
+}
+
+
+void parse_args(suffixes ** head, int argc, char** argv, int * for_all)
+{
+	char * op;
+	if (argc == 1) {
+		add_suffix(head, "", NULL, NULL, NULL);
+	}
+	while (--argc) {
+		op = argv[argc];
+		if (!strcmp(op, "-a")) {
+			*for_all = 1;
+			continue;
+		} else if (!strcmp(op, "!")) {
+			op = "";
+		}
+		add_suffix(head, op, NULL, NULL, NULL);
+	}
+}
+
+
+
 int main(int argc, char **argv) {
 	int fd, md_set = 0, linenr, fret;
 	ssize_t tmp;
@@ -47,12 +146,16 @@ int main(int argc, char **argv) {
 	char *pass;
 	char passcopy[MAXARGLN + 1];
 	char txtbuff[256], buf[128];
+	char apop_sec[128];;
 	struct rlimit corelimit = {0, 0};
 	char cfgfile[PATH_MAX];
 	struct stat stbuf;
 	char *tmp2;
-	char tmpmaildrop_type[MAXMDTYPENAMELENGTH], tmpmaildrop_name[PATH_MAX];
+	char tmpmaildrop_type[MAXMDTYPENAMELENGTH], tmpmaildrop_name[PATH_MAX], tmpapop_sec[256];
 	static char digits[] = "0123456789abcdef";
+	struct suffixes * suffix_head = NULL, * p = NULL;
+	int for_all = 0;
+
 	
 	if (setrlimit(RLIMIT_CORE, &corelimit) < 0) {
 		perror("setrlimit");
@@ -62,10 +165,14 @@ int main(int argc, char **argv) {
 		fprintf(stderr, "can't find user with UID: %u\n", getuid());
 		return 1;
 	};
+
+	parse_args(&suffix_head, argc, argv, &for_all);
+
 	username[0] = 0;
 	strncat(username, pwentry->pw_name, 8);
 	if (strlen(pwentry->pw_name) > 8)
 		fprintf(stderr, "Warning: username truncated\n");
+
 	snprintf(txtbuff, sizeof(txtbuff), "Enter NEW password for user %.40s: ", username);
 	pass = getpass(txtbuff);
 	passcopy[0] = 0;
@@ -80,6 +187,16 @@ int main(int argc, char **argv) {
 		fprintf(stderr, "Passwords don't match\n");
 		return 1;
 	};
+
+	memset(apop_sec, 0, sizeof(apop_sec));
+	tmp2 = apop_sec;
+	for (tmp = 0; tmp < strlen(passcopy); tmp++) {
+		passcopy[tmp] ^= 0xff;
+		tmp2[tmp * 2] = digits[(passcopy[tmp] >> 4) & 0x0f];
+		tmp2[(tmp * 2) + 1] = digits[passcopy[tmp] & 0x0f];
+	};
+	memset(passcopy, 0, strlen(passcopy));
+
 	if (stat(pwentry->pw_dir, &stbuf) < 0) {
 		memset(passcopy, 0, strlen(passcopy));
 		fprintf(stderr, "can't stat user home directory: %.1024s", pwentry->pw_dir);
@@ -192,47 +309,72 @@ int main(int argc, char **argv) {
 				fprintf(stderr, "no such maildrop type: %.40s", tmp2);
     				return 1;
 			};
+
 			strcpy(tmpmaildrop_type, tmp2);
-			md_set = 1;
+                        tmp2 = strtok(NULL, " \t");
+			add_suffix(&suffix_head,  tmp2,  NULL, tmpmaildrop_name, tmpmaildrop_type);
+
 			continue;
 		};
 		if (strcasecmp(buf, "APOPSecret") == 0)
+		{
+			if ((tmp2 = strtok(NULL, " \t")) != NULL) {
+				strcpy(tmpapop_sec, tmp2);
+				tmp2 = strtok(NULL, " \t");
+				add_suffix(&suffix_head, tmp2, tmpapop_sec, NULL, NULL);
+			}
+
 			continue;
+		}
 		memset(passcopy, 0, strlen(passcopy));
 		close(fd);
 		fprintf(stderr, "unknown option name, line: %u", linenr);
 		return 1;
 	};
+
 	if (lseek(fd, 0, SEEK_SET) < 0) {
 		memset(passcopy, 0, strlen(passcopy));
 		close(fd);
 		perror("lseek");
 		return 1;
 	};
-	if (md_set == 1) {
-		snprintf(txtbuff, sizeof(txtbuff), "MailDrop %.100s %.100s\n", tmpmaildrop_name, tmpmaildrop_type);
-		if (write(fd, txtbuff, strlen(txtbuff)) < 0) {
-			memset(passcopy, 0, strlen(passcopy));
-			close(fd);
-			perror("write");
-			return 1;
+
+	p = suffix_head;
+	while (p) {
+		if (p->mdrop_type && p->mdrop_path) {
+			snprintf(txtbuff, sizeof(txtbuff), "MailDrop %.100s %.100s %.100s\n",
+								p->mdrop_type,
+								p->mdrop_path,
+								p->suffix);
+			if (write(fd, txtbuff, strlen(txtbuff)) < 0) {
+				memset(passcopy, 0, strlen(passcopy));
+				close(fd);
+				perror("write");
+				return 1;
+			};
 		};
-	};
-	memset(txtbuff, 0, sizeof(txtbuff));
-	strcpy(txtbuff, "APOPSecret ");
-	tmp2 = txtbuff + strlen(txtbuff);
-	for (tmp = 0; tmp < strlen(passcopy); tmp++) {
-		passcopy[tmp] ^= 0xff;
-		tmp2[tmp * 2] = digits[(passcopy[tmp] >> 4) & 0x0f];
-		tmp2[(tmp * 2) + 1] = digits[passcopy[tmp] & 0x0f];				
-	};
-	memset(passcopy, 0, strlen(passcopy));
-	strcat(txtbuff, "\n");
-	if (write(fd, txtbuff, strlen(txtbuff)) < 0) {
-		memset(txtbuff, 0, strlen(txtbuff));
-		close(fd);
-		perror("write");
-		return 1;
+		p = p->next;
+	}
+
+	p = suffix_head;
+	while (p) {
+		if (for_all || p->flag || p->apop_sec) {
+			memset(txtbuff, 0, sizeof(txtbuff));
+			snprintf(txtbuff, sizeof(txtbuff), "APOPSecret %.100s %.100s\n",
+					for_all || p->flag ? apop_sec : p->apop_sec,
+					p->suffix);
+			if (*p->suffix && !p->mdrop_type)
+				fprintf(stderr, "Warning: no maildrop definition for `%.50s'\n", p->suffix);
+
+			if (write(fd, txtbuff, strlen(txtbuff)) < 0) {
+				memset(txtbuff, 0, strlen(txtbuff));
+				close(fd);
+				perror("write");
+				return 1;
+			};
+
+		};
+		p = p->next;
 	};
 	memset(txtbuff, 0, strlen(txtbuff));
 	if ((tmp = lseek(fd, 0, SEEK_CUR)) < 0) {
diff --git a/src/userconfig.c b/src/userconfig.c
index 193f508..efd95bb 100644
--- a/src/userconfig.c
+++ b/src/userconfig.c
@@ -30,6 +30,7 @@ static const char rcsid[] = "$Id: userconfig.c,v 1.3 2000/04/28 16:58:55 jurekb
 
 extern char maildrop_name[];
 extern char maildrop_type[];
+extern char usersuffix[];
 #ifdef APOP
 extern char apop_secret[];
 #endif
@@ -121,12 +122,6 @@ void parse_user_cfg(char *homedir) {
 			buf[tmp - 1] = 0;
 		strtok(buf, " \t");
 		if (strcasecmp(buf, "maildrop") == 0) {
-			if (md_set == 1) {
-				memset(buf, 0, sizeof(buf));
-				close(fd);
-				pop_log(pop_priority, "user config: maildrop already set in user config file");
-				return;
-			};
 			if ((tmp2 = strtok(NULL, " \t")) == NULL) {
 				memset(buf, 0, sizeof(buf));
 				close(fd);
@@ -165,17 +160,24 @@ void parse_user_cfg(char *homedir) {
 				return;
 			};
 			strcpy(tmpmaildrop_type, tmp2);
-			md_set = 1;
+			if ((((tmp2 = strtok(NULL, " \t")) == NULL) && (usersuffix[0] == 0)) ||
+			 ((tmp2 != NULL) && (usersuffix[0] != 0) && (strcasecmp(tmp2,usersuffix) == 0))) {
+				if (md_set == 1) {
+					memset(buf, 0, sizeof(buf));
+					close(fd);
+					pop_log(pop_priority, "user config: maildrop already set in user config file");
+					return;
+				};
+
+				md_set = 1;
+				strcpy(maildrop_name, tmpmaildrop_name);
+				strcpy(maildrop_type, tmpmaildrop_type);
+			};
+
 			continue;
 		};
 #ifdef APOP
 		if (strcasecmp(buf, "APOPsecret") == 0) {
-			if (as_set == 1) {
-				memset(buf, 0, sizeof(buf));
-				close(fd);
-				pop_log(pop_priority, "user config: APOP secret already set in user config file");
-				return;
-			};
 			if ((tmp2 = strtok(NULL, " \t")) == NULL) {
 				memset(buf, 0, sizeof(buf));
 				close(fd);
@@ -215,7 +217,19 @@ void parse_user_cfg(char *homedir) {
 					tmpapop_secret[tmp3] |= (tmp2[(tmp3 * 2) + 1] - 'a' + 10);
 				tmpapop_secret[tmp3] ^= 0xff;
 			};
-			as_set = 1;
+			if ((((tmp2 = strtok(NULL, " \t")) == NULL) && (usersuffix[0] == 0))
+			 || ((tmp2 != NULL) && (usersuffix[0] != 0) && (strcasecmp(tmp2,usersuffix) == 0))) {
+				if (as_set == 1) {
+					memset(buf, 0, sizeof(buf));
+					close(fd);
+					pop_log(pop_priority, "user config: APOP secret already set in user config file");
+					return;
+				};
+
+				strcpy(apop_secret, tmpapop_secret);
+				as_set = 1;
+			};
+
 			continue;
 		};
 		memset(tmpapop_secret, 0, sizeof(tmpapop_secret));
@@ -227,12 +241,8 @@ void parse_user_cfg(char *homedir) {
 	};
 	close(fd);
 	if (md_set == 1) {
-		strcpy(maildrop_name, tmpmaildrop_name);
-		strcpy(maildrop_type, tmpmaildrop_type);
 	};
 #ifdef APOP
-	if (as_set == 1)
-		strcpy(apop_secret, tmpapop_secret);
 	memset(tmpapop_secret, 0, sizeof(tmpapop_secret));
 #endif
 	return;
-- 
